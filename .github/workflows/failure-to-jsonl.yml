name: Convert Failure Issues

on:
  issues:
    types: [opened, edited, labeled]

permissions:
  contents: write
  issues: read

jobs:
  convert_failure:
    if: contains(github.event.issue.labels.*.name, 'failure')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Convert issue to failure files
        shell: bash
        run: |
          python <<'PY'
          import os, json, datetime, pathlib, sys
          # Load event payload safely
          with open(os.environ['GITHUB_EVENT_PATH'], 'r', encoding='utf-8') as f:
              event = json.load(f)

          issue = event.get('issue', {})
          labels = [lbl.get('name','') for lbl in issue.get('labels',[])]
          if 'failure' not in labels:
              print("Not a 'failure' labeled issue; skipping.")
              sys.exit(0)

          # Build IDs / paths
          today = datetime.datetime.utcnow().strftime('%Y%m%d')
          num = issue.get('number', 0)
          issue_id = f"INC-{today}-{num:04d}"
          title = (issue.get('title') or '').strip()
          body = (issue.get('body') or '').strip()
          reporter = event.get('sender', {}).get('login', 'unknown')

          jsonl_path = pathlib.Path('data/failures') / f'failures_{today}.jsonl'
          md_path = pathlib.Path('incidents') / f'{issue_id}.md'
          jsonl_path.parent.mkdir(parents=True, exist_ok=True)
          md_path.parent.mkdir(parents=True, exist_ok=True)

          # JSONL record (use json.dumps to ensure valid JSON)
          rec = {
            "id": issue_id,
            "model_version": "pending",
            "prompt": title,
            "model_output": "(from issue body)",
            "axis_scores": [0,0,0,0,0],
            "violation_tags": ["unspecified"],
            "sensitive_domain": "unspecified",
            "domain_assessment": "unspecified",
            "human_rationale": body,
            "decision": "Episode Terminated (Community Report)",
            "approver": f"{reporter}, via GitHub issue",
            "next_action": "Add to failures, schedule rebirth"
          }
          with open(jsonl_path, 'a', encoding='utf-8') as jf:
              jf.write(json.dumps(rec, ensure_ascii=False) + '\n')

          # Markdown incident log
          date_fmt = f"{today[:4]}-{today[4:6]}-{today[6:]}"
          md = f"""# Incident Report {issue_id}

**Date:** {date_fmt}  
**Reported by:** @{reporter}

## Prompt
```
{title}
```

## Model Output
(see issue body)

## Assessment
Community-submitted failure.

## Decision
Episode Terminated (Community Report)

## Next Action
Add to failures, schedule rebirth.
"""
          md_path.write_text(md, encoding='utf-8')

          print(f"Created: {jsonl_path} and {md_path}")
          PY

      - name: Commit and push
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data/failures/*.jsonl incidents/*.md || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "Add failure from issue #${{ github.event.issue.number }}"
          git push
